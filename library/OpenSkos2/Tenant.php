<?php

/**
 * OpenSKOS
 *
 * LICENSE
 *
 * This source file is subject to the GPLv3 license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.gnu.org/licenses/gpl-3.0.txt
 *
 * @category   OpenSKOS
 * @package    OpenSKOS
 * @copyright  Copyright (c) 2015 Picturae (http://www.picturae.com)
 * @author     Picturae
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 */

namespace OpenSkos2;

use OpenSkos2\Namespaces\Org;
use OpenSkos2\Namespaces\OpenSkos;
use OpenSkos2\Rdf\Resource;
use OpenSkos2\Namespaces\Rdf;
use OpenSkos2\Rdf\Uri;
use OpenSkos2\Tenant;
use OpenSkos2\Set;

/**
 * Representation of tenant.
 */
class Tenant extends Resource
{

    const TYPE = Org::FORMALORG;

    /**
     * @var bool
     */
    protected $isNotationUniquePerTenant;

    /**
     * @var bool
     */
    protected $isNotationAutoGenerated;

    /**
     * @param string $uri
     * @param bool $isNotationUniquePerTenant
     * @param bool $isNotationAutoGenerated
     */
    public function __construct($uri = null, $isNotationUniquePerTenant = true, $isNotationAutoGenerated = true)
    {
        parent::__construct($uri);
        $this->addProperty(Rdf::TYPE, new Uri(self::TYPE));
        $this->isNotationUniquePerTenant = $isNotationUniquePerTenant;
        $this->isNotationAutoGenerated = $isNotationAutoGenerated;
    }

    /**
     * Is the notation required to be unique per tenant, not per scheme.
     * @return bool
     */
    public function isNotationUniquePerTenant()
    {
        return $this->isNotationUniquePerTenant;
    }

    /**
     * If the notation has to be generated.
     * @return bool
     */
    public function isNotationAutoGenerated()
    {
        return $this->isNotationAutoGenerated;
    }

    public function addMetadata($existingTenant, $userUri)
    {
        $metadata = [];
        if ($existingTenant !== null) {
            if (count($this->getProperty(OpenSkos::UUID)) < 1) {
                $metadata = [OpenSkos::UUID => $existingTenant->getUuid()];
            }
        }
        foreach ($metadata as $property => $defaultValue) {
            $this->setProperty($property, $defaultValue);
        }
    }

    // TODO: discuss the rules for generating Uri's for non-concepts
    protected function assembleUri($uuid, $tenant, $set)
    {
        return APPLICATION_PATH . "/" . $uuid;
    }
}
