<?php

/**
 * OpenSKOS
 *
 * LICENSE
 *
 * This source file is subject to the GPLv3 license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.gnu.org/licenses/gpl-3.0.txt
 *
 * @category   OpenSKOS
 * @package    OpenSKOS
 * @copyright  Copyright (c) 2015 Picturae (http://www.picturae.com)
 * @author     Picturae
 * @license    http://www.gnu.org/licenses/gpl-3.0.txt GPLv3
 */

namespace OpenSkos2;

use OpenSkos2\Namespaces\Org;
use OpenSkos2\Namespaces\OpenSkos;
use OpenSkos2\Rdf\Resource;

/**
 * Representation of tenant.
 */
class Tenant extends Resource
{

    const TYPE = Org::FORMALORG;

    /**
     * @var bool
     */
    protected $isNotationUniquePerTenant;

    /**
     * @var bool
     */
    protected $isNotationAutoGenerated;

 
    /**
     *  @var bool
     */
     
    protected $enableSkosXl;
    
     /**
     * @param string $code
     * @param bool $isNotationUniquePerTenant
     * @param bool $isNotationAutoGenerated
     */
    public function __construct(
        $code,
        $isNotationUniquePerTenant = true,
        $isNotationAutoGenerated = true,
        $enableSkosXl = null
    ) {
        $this->code = $code;
        $this->isNotationUniquePerTenant = $isNotationUniquePerTenant;
        $this->isNotationAutoGenerated = $isNotationAutoGenerated;
        $this->enableSkosXl = (bool)$enableSkosXl;
    }

    /**
     * Is the notation required to be unique per tenant, not per scheme.
     * @return bool
     */
    public function isNotationUniquePerTenant()
    {
        return $this->isNotationUniquePerTenant;
    }

    /**
     * If the notation has to be generated.
     * @return bool
     */
    public function isNotationAutoGenerated()
    {
        return $this->isNotationAutoGenerated;
    }
    
  
    /**
     * @return bool
     */
    public function getEnableSkosXl()
    {
        return $this->enableSkosXl;
    }
   
      
    public function ensureMetadata(
        $tenant, 
        $set, 
        \OpenSkos2\Person $person, 
        LabelManager $labelManager, 
        \OpenSkos2\PersonManager $personManager, 
        $existingTenant = null)
    {
       $nowLiteral = function () {
            return new Literal(date('c'), null, Literal::TYPE_DATETIME);
        };

        $forFirstTimeInOpenSkos = [
            OpenSkos::UUID => new Literal(Uuid::uuid4()),
            DcTerms::DATESUBMITTED => $nowLiteral
        ];

        foreach ($forFirstTimeInOpenSkos as $property => $defaultValue) {
            if (!$this->hasProperty($property)) {
                $this->setProperty($property, $defaultValue);
            }
        }

        $this->resolveCreator($person, $personManager);

        $this->setModified($person);
    }

    // TODO: discuss the rules for generating Uri's for non-concepts
    protected function assembleUri($tenant, $set, $uuid, $notation, $init)
    {
        $baseUri = $init['api.baseUri'];
        return $baseUri . "" . $uuid;
    }
}
